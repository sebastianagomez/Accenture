function operadoresLogicos(num1, num2, num3) {
  //La función recibe tres números distintos. 
  //Si num1 es mayor a num2 y a num3 y además es positivo, retornar ---> "Número 1 es mayor y positivo"
  //Si alguno de los tres números es negativo, retornar ---> "Hay negativos"
  //Si num3 es más grande que num1 y num2, aumentar su valor en 1 y retornar el nuevo valor.
  //0 no es ni positivo ni negativo. Si alguno de los argumentos es 0, retornar "Error".
  //Si no se cumplen ninguna de las condiciones anteriores, retornar false. 

  if (num1 < 0 || num2 < 0 || num3 < 0){
    return "Hay negativos";
  } else if (num1 === 0 || num2 === 0 || num1 === 0){
    return "Error";
  } else if (num1 > num2 && num1 > num3 && num1 > 0){
    return "Número 1 es mayor y positivo";
  } else if (num3 > num1 && num3 > num2){
    return num3 +1;
  } else {
    return false; 
  }
}

function esPrimo(numero) {
  // Devuelve "true" si "numero" es primo
  // De lo contrario devuelve "falso"
  // Pista: un número primo solo es divisible por sí mismo y por 1
  // Pista 2: Puedes resolverlo usando un bucle `for`
  // Nota: Los números 0 y 1 NO son considerados números primos

  if (numero < 2) return false;
  if (numero === 2) return true;
  for (var i = 2 ;i < numero ; i++){
    if ( numero % i === 0) {
      return false;
      }  
    } return true;
}

function esVerdadero(valor){
  //Escribe una función que reciba un valor booleano y retorne “Soy verdadero” 
  //si su valor es true y “Soy falso” si su valor es false.
  //Escribe tu código aquí
  if (valor === true){
    return "Soy verdadero";
  } 
    return "Soy falso";
}

function tablaDelSeis(){
  //Escribe una función que muestre la tabla de multiplicar del 6 (del 0 al 60).
  //La función devuelve un array con los resultados de la tabla de multiplicar del 6 en orden creciente.
  //Escribe tu código aquí   
  
  let tabla6 = [];

  for (let i = 0 ; i < 11 ; i++ ) {
    tabla6.push(6 * i);
  } 
    return tabla6;
}

function tieneTresDigitos(numero){
  //Leer un número entero y retornar true si tiene 3 dígitos. Caso contrario, retorna false.
  //Escribe tu código aquí

  if (numero > 99 && numero < 1000){
    return true;
  }
    return false;
}

function doWhile(numero) {
  //Implementar una función tal que vaya aumentando el valor recibido en 5 hasta un límite de 8 veces
  //Retornar el valor final.
  //Usar el bucle do ... while.

  var a = numero;
  var i = 0;
  do {
    i = i + 1;
    a = a + 5;
  }
  while(i < 8);
  return a;
}

function numeroMasGrande(numeros) {
  // "numeros" debe ser una matriz de enteros (int/integers)
  // Devuelve el número más grande
  // Tu código:

  var mayor = numeros [0];

  for ( var i = 1 ; i < numeros.lenght ; i++){
    if (numeros [i] > mayor){
      mayor = numeros [i];
    }
  }
  return mayor;
}


function multiplicarArgumentos() {
  // Usa la palabra clave `arguments` para multiplicar todos los argumentos y devolver el producto
  // Si no se pasan argumentos devuelve 0. Si se pasa un argumento, simplemente devuélvelo
  // Escribe tu código aquí:

  if (arguments.lenght === 1){
    return arguments[0];
  } else if (!arguments.lenght){
    return 0;
  }
}


function cuentoElementos(arreglo){
  //Realiza una función que retorne la cantidad de los elementos del arreglo cuyo valor es mayor a 19.
  //Escribe tu código aquí

  var cantidad = 0;

  for ( var i = 0 ; i < arreglo.lenght; i++){
    if (arreglo[i] > 90){
      cantidad++
    }
  }
  return cantidad;
}

----------------------------------------------------------
// Objetos : Ejercicio de Cofla

// Problema A :
//	Mostrar las particularidades de los tres celulares
//	Cada uno debe tener color, peso, resolucion de pantalla, camara y memoria ram
//	Deber poder prender, apagar, reiniciar y grabar

// Problema B:
//	Implementar todas esas cualidades pero en celulares de alta gama (camara lenta, reconocimiento facial, camara extra y mejoras)


class Celular {
    constructor(color, peso, tamano, rdc, ram){
        this.color = color;
        this.peso = peso;
        this.tamano = tamano;
        this.resolucionDeCamara = rdc;
        this.memoriaRam = ram;
        this.encendido = false;
    }
    PresionarBotonEncendido(){
        if (this.encendido == false){
            alert("celular prendido");
            this.encendido = true;
        } else {
            alert ("celular apagado");
        }
    }
    reinciar (){
        if (this.encendido == true){
            alert("reiniciando celular");
        } else {
            alert("el celular está apagado")
        }
    }
    tomarFotos (){
        alert(`foto tomada de una resolucion de: ${this.resolucionDeCamara}`);
    }
    grabarVideo (){
        alert(`grabando video en ${this.resolucionDeCamara}`);
    }
    mobileInfo (){
        return `
        Color: ${this.color}</br>
        Peso: ${this.peso}</br>
        Tamano: ${this.tamano}</br>
        Resolucion de Video: ${this.resolucionDeCamara}</br>
        Memoria Ram: ${this.memoriaRam}</br>

        `;
    }
}

class CelularAltaGama extends Celular{
    constructor (color, peso, tamano, rdc, ram, rdce){
        super(color, peso, tamano, rdc, ram);
        this.resolucionDeCamaraExtra = rdce;
    }
    grabarVideoLento(){
        alert("Estas grabando en camara lenta");
    }
    reconocimientoFacial (){
        alert("Vamos a iniciar un reconocimiento facial")
    }
    mobileInfoAltaGama(){
        return this.mobileInfo() + `Resolucion de Camara Extra: ${this.resolucionDeCamaraExtra}`
    }
}   

// celular1 = new Celular ("rojo", "150gr", "5", "FullHD", "2GB");
// celular2 = new Celular ("negro", "120gr", "4.5", "HD1080", "3GB");
// celular3 = new Celular ("blanco", "130gr", "4.8", "HD", "4GB");

// celular1.PresionarBotonEncendido();
// celular1.tomarFotos();
// celular1.grabarVideo();
// celular1.reinciar();
// celular1.PresionarBotonEncendido();


celular1 = new CelularAltaGama ("purpura", "155gr", "5", "FullHD", "4GB", "4K");
celular2 = new CelularAltaGama ("negro", "165gr", "5.5", "HD1080", "4GB", "4K");

document.write(`
    ${celular1.mobileInfoAltaGama()} <br><br>
    ${celular2.mobileInfoAltaGama()} <br>
`);

// Problema C: 
//	Crear un sistema para decidir que App descargar
//	Debe contener la cantidad de descargas, puntuacion y peso
//	Se deben poder instalar, abrir cerrar y desinstalar

class App {
    constructor(descargas, puntuacion, peso){
        this.descargas = descargas;
        this.puntuacion = puntuacion;
        this.peso = peso;
        this.iniciada = false;
        this.instalada = false;
    }
    instalar (){
        if (this.instalada == false){
            this.instalada = true;
            alert("App instalada correctamente");
        }
    }
    desinstalar (){
        if (this.instalada == true){
            this.instalada = false;
            alert("App instalada correctamente");
        }
    }
    abrir(){
        if (this.iniciada == false && this.instalada == true){
            this.iniciada == true;
            alert ("App iniciada")
        }
    }
    cerrar(){
        if (this.iniciada = true && this.instalada == true){
            this.iniciada == false;
            alert ("App cerrada")
        }
    }
    appInfo(){
        return `
            Descargas: <b>${this.descargas}<br>
            Puntuacion: <b>${this.puntuacion}<br>
            Peso: <b>${this.peso}<br>
        `
    }
}

app = new App ("16000", "5 estrellas", "35Mb");
app2 = new App ("13000", "2.6 estrellas", "51Mb");
app3 = new App ("14000", "4.2 estrellas", "12Mb");
app4 = new App ("14400", "5 estrellas", "62Mb");
app5 = new App ("19200", "4.5 estrellas", "59Mb");
app6 = new App ("11600", "4.1 estrellas", "92Mb");
app7 = new App ("15900", "3.5 estrellas", "52Mb");

document.write(
    `
    ${app.appInfo()}<br>
    ${app2.appInfo()}<br>
    ${app3.appInfo()}<br>
    ${app4.appInfo()}<br>
    ${app5.appInfo()}<br>
    ${app6.appInfo()}<br>
    ${app7.appInfo()}<br>
    `
)